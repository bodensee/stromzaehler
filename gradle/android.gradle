apply plugin: 'android'
apply from:file("${rootProject.projectDir}/gradle/eclipse.gradle").absolutePath

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.+'
    }
}

android {
    compileSdkVersion 'Google Inc.:Google APIs:16'
    buildToolsVersion '20.0.0'

    // structure of eclipse
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            // keep empty
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    if (project.hasProperty('androidReleaseKeyAlias') &&
            project.hasProperty('androidReleaseKeyStoreFile') &&
            project.hasProperty('androidReleaseKeyStorePassword') &&
            project.hasProperty('androidReleaseKeyPassword')) {
        android.signingConfigs.release.keyAlias = androidReleaseKeyAlias
        android.signingConfigs.release.storeFile = file(androidReleaseKeyStoreFile)
        android.signingConfigs.release.storePassword = androidReleaseKeyStorePassword
        android.signingConfigs.release.keyPassword = androidReleaseKeyPassword
    } else {
        buildTypes.release.signingConfig = null
    }

}

// eclipse support

eclipse.ext {
    genDir = new File("${projectDir}/gen")
}

eclipse.classpath.plusConfigurations += [configurations.compile]
 
eclipse.classpath {

    defaultOutputDir = file('bin/classes')

    file {
        beforeMerged {classpath ->
            classpath.entries.removeAll() { c ->
                c.kind != 'lala'
            }
        }
 
        whenMerged { classpath ->
            classpath.entries.removeAll() { c ->
                c.path == 'org.eclipse.jdt.launching.JRE_CONTAINER'
            }
        }

        withXml {
            eclipse.genDir.mkdir()

            def node = it.asNode()

            node.appendNode('classpathentry kind="src" path="src"')
//            node.appendNode('classpathentry kind="src" path="src/androidTest/java"')
            node.appendNode('classpathentry kind="src" path="gen"')

            node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"')
            node.appendNode('classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"')
            node.appendNode('classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"')

        }
    }
}

eclipse.project {
    natures 'com.android.ide.eclipse.adt.AndroidNature'
    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

    file {
        def fixedOrder = [ 'com.android.ide.eclipse.adt.ResourceManagerBuilder', 'com.android.ide.eclipse.adt.PreCompilerBuilder', 'org.eclipse.jdt.core.javabuilder', 'com.android.ide.eclipse.adt.ApkBuilder' ]

        whenMerged { project ->
            // sort the android nature at the beginning
            // so that eclipse shows the android icon decorated on the project
            project.natures.sort { a, b ->
                "com.android.ide.eclipse.adt.AndroidNature".equals(a) ? -1 : 0
            }
            // sort build commands at fixed order, all others build commands
            // at the end of the list (metrics)
            project.buildCommands.sort { a, b ->
                def pos1 = fixedOrder.indexOf(a.name)
                def pos2 = fixedOrder.indexOf(b.name)
                if (pos1 == -1 || pos2 == -1)
                {
                    return pos1 == -1 ? pos2 == -1 ? 0 : 1 : -1
                }
                return pos1.compareTo(pos2)
            }
        }
    }
}
