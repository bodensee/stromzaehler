// PMD configuration
apply plugin: 'pmd'
pmd {
	toolVersion = "5.1.2"
    ignoreFailures = true 	// Whether or not to allow the build to continue if there are warnings
    ruleSets = []
	ruleSetFiles = files("${rootProject.projectDir.absolutePath}/config/pmdruleset.xml")
}

// Findbugs configuration
apply plugin: 'findbugs'
findbugs {
	toolVersion = "3.0.0"
	ignoreFailures = true 	// Whether or not to allow the build to continue if there are warnings
	effort = "max"			// The analysis effort level. The value specified should be one of min, default, or max. Higher levels increase precision and find more bugs at the expense of running time and memory consumption.
	excludeFilter = file("${rootProject.projectDir.absolutePath}/config/findbugs-exclude-filter.xml")
}

// Checkstyle configuration
apply plugin: 'checkstyle'
checkstyle {
	toolVersion = "5.7"
	ignoreFailures = true 	// Whether or not to allow the build to continue if there are warnings
	configFile = file("${rootProject.projectDir.absolutePath}/config/checkstyle.xml")
}

// JDepend
apply plugin: 'jdepend'
jdepend {
	ignoreFailures = true 	// Whether or not to allow the build to continue if there are warnings
}

// Compile Warnings (write to file)
tasks.withType(JavaCompile){
	def warnLogFile = file("$buildDir/javac_warnings.txt")
	logging.addStandardErrorListener(new StandardOutputListener() {
		void onOutput(CharSequence output) {
			warnLogFile << output
		}
	})
}

// Google Singleton Detector
task gsd {
	ext.reportDir = file("$buildDir/reports/gsd")
    ext.inFile = new File(buildDir, "classes/main")
    ext.outFile = new File(reportDir, "${project.name}.graphml")
    inputs.dir inFile
    outputs.file outFile

    ext.dotOptions = "-Grankdir=TD -Gconcentrate=true -Glabelfontsize=14 -Gnodesep=0.2 -Granksep=0.7"

	doLast {
		reportDir.mkdirs()

		ext.gsdResult = exec() {
	        commandLine = ["java", "-jar", "${rootProject.projectDir.absolutePath}/gradle/gsd/gsd.jar", "-S", inFile.toString(), outFile.toString()]
	    }

		println gsdResult
	}
	outputs.upToDateWhen { false }
}

/*
	<property name="reports.gsd" location="${reports}/gsd" />

	<property name="gsd.support" location="config/gsd" />
	<property name="thirdParty.buildTime" location="D:/software/thirdParty.buildTime" />

	<property name="gsd.dot.options" value="-Grankdir=TD -Gconcentrate=true -Glabelfontsize=14 -Gnodesep=0.2 -Granksep=0.7" />

	<target name="gsd" if="gsd.enabled">
		<mkdir dir="${reports.gsd}" />

		<java fork="true" jar="${thirdParty.buildTime}/gsd/0.7.3/lib/gsd.jar" dir="${reports.gsd}" failonerror="false" outputproperty="gsd.stats">
			<arg line="-S ${dist} ${reports.gsd}/gsd.graphml" />
		</java>

		<!-- graph -->
		<replace file="${reports.gsd}/gsd.graphml" token="xmlns=&quot;http://graphml.graphdrawing.org/xmlns/graphml&quot; " value="" />
		<xslt style="${gsd.support}/graphml2dot.xsl" in="${reports.gsd}/gsd.graphml" out="${reports.gsd}/gsd.dot" />

		<exec dir="${reports.gsd}" executable="dot.exe" os="Windows XP, Windows 2000, Windows NT" failonerror="true">
			<arg line="${gsd.dot.options} -Tpng ${reports.gsd}/gsd.dot -o ${reports.gsd}/gsd.png" />
		</exec>

		<!-- index.html -->
      <copy file="${gsd.support}/style.css" tofile="${reports.gsd}/style.css" />
		<copy file="${gsd.support}/index.html" tofile="${reports.gsd}/index.html">
			<filterset>
				<filter token="STATS" value="${gsd.stats}" />
			</filterset>
		</copy>
	</target>
*/
